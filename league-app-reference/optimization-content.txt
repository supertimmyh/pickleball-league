Because the application is on Google Cloud Run, multiple instances of the application can be running at the same time. If two users submit matches at roughly the same time, two separate instances of the application will both try to read all the match files and write to the rankings.json file simultaneously. This creates a "race condition" where the two processes can interfere with each other, potentially leading to one of the new matches being missed in the final ranking update, resulting in incorrect and inconsistent rankings.
Here is a high-level overview of the recommended approach:

   1. Separate match submission and ranking generation: The match submission
      process should only be responsible for saving the new match file. It shoud
       not trigger the ranking generation directly.
   2. Introduce a locking mechanism: Before running the generate_rankings.py
      script, the script should attempt to acquire a "lock". This can be done by
      creating a lock file (e.g., rankings.lock). If the lock file already
      exists, it means another ranking update is in progress, and the script
      should wait or exit.
   3. Run ranking generation as a separate, periodic task: Instead of updating
      rankings on every submission, you could run the update_rankings.sh script
      as a periodic job (e.g., every few minutes using a cron job or a Cloud
      Scheduler job). This script would acquire a lock, run the
      generate_rankings.py script, and then release the lock.